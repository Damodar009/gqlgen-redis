package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"gqlgen-todos/graph/model"
)

// CreatUser is the resolver for the creatUser field.
func (r *mutationResolver) CreatUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	//id := uuid.New().String()
	user := model.CreateUserInput{
		Name:   input.Name,
		Email:  input.Email,
		Age:    input.Age,
		Gender: input.Gender,
		Phone:  input.Phone,
	}
	return r.Resolver.UserService.CreateUser(ctx, user)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	return r.Resolver.UserService.UpdateUser(ctx, id, input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.DeleteUserResponse, error) {
	return r.Resolver.UserService.DeleteUser(ctx, id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.UserService.Users(ctx)
}

// User is the resolver for the user field.''

func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return r.Resolver.UserService.User(ctx, id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
